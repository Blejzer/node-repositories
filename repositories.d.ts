/** Declaration file generated by dts-gen */

export class AJAXRepository {
    constructor(urlRoot: any, ...args: any[]);
    add(entity: any, cb: () => any): any;
    clear(cb: () => any): void;
    disconnect(): any;
    findAll(cb: () => any): any;
    findOne(id: string, cb: () => any): any;
    remove(id: string, cb: () => any): any;
    update(data: any, cb: () => any): any;
    static defaultMaxListeners: number;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
}
export class CassandraRepository {
    constructor(client: any, modelType: any, ...args: any[]);
    add(entity: any, cb: () => any): any;
    clear(cb: () => any): void;
    disconnect(): void;
    findAll(cb: () => any): any;
    findOne(id: string, cb: () => any): any;
    remove(id: string, cb: () => any): any;
    update(data: any, cb: () => any): any;
    static defaultMaxListeners: number;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
}
export class FSRepository {
    constructor(filePath: any, strategy: any, ...args: any[]);
    add(entity: any, cb: () => any): any;
    clear(cb: () => any): void;
    disconnect(): void;
    findAll(cb: () => any): any;
    findOne(id: string, cb: () => any): any;
    read(path: any, cb: () => any): any;
    remove(id: string, cb: () => any): any;
    setStrategy(strategy: any): void;
    update(entity: any, cb: () => any): any;
    use(strategy: any): void;
    write(path: any, data: any, cb: () => any): any;
    static defaultMaxListeners: number;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
}
export class MongoRepository {
    constructor(connection: any, collection: any, ...args: any[]);
    add(entity: any, cb: () => any): any;
    clear(cb: () => any): any;
    disconnect(): void;
    findAll(cb: () => any): any;
    findOne(id: string, cb: () => any): any;
    remove(id: string, cb: () => any): any;
    update(entity: any, cb: () => any): any;
    static defaultMaxListeners: number;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
}
export class MongooseRepository {
    constructor(mongoose: any, modelName: any, ...args: any[]);
    add(entity: any, cb: () => any): any;
    clear(cb: () => any): void;
    disconnect(cb: () => any): void;
    findAll(cb: () => any): any;
    findOne(id: string, cb: () => any): any;
    remove(id: string, cb: () => any): any;
    update(entity: any, cb: () => any): any;
    static defaultMaxListeners: number;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
}
export class PostgreRepository {
    constructor(sequelize: any, modelType: any, ...args: any[]);
    add(entity: any, cb: () => any): any;
    clear(cb: () => any): any;
    disconnect(): void;
    findAll(cb: () => any): any;
    findOne(id: string, cb: () => any): any;
    remove(id: string, cb: () => any): any;
    update(entity: any, cb: () => any): any;
    static defaultMaxListeners: number;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
}
export class RedisRepository {
    constructor(redis: any, collection: any, ...args: any[]);
    add(entity: any, cb: () => any): any;
    clear(cb: () => any): void;
    disconnect(): void;
    findAll(cb: () => any): any;
    findOne(id: string, cb: () => any): any;
    remove(id: string, cb: () => any): any;
    update(entity: any, cb: () => any): any;
    static defaultMaxListeners: number;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
}
export namespace AJAXRepository {
    class EventEmitter {
        constructor();
        addListener(type: any, listener: any): any;
        emit(type: any, ...args: any[]): any;
        eventNames(): any;
        getMaxListeners(): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        setMaxListeners(n: any): any;
        static EventEmitter: any;
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
    }
}
export namespace CassandraRepository {
    class EventEmitter {
        constructor();
        addListener(type: any, listener: any): any;
        emit(type: any, ...args: any[]): any;
        eventNames(): any;
        getMaxListeners(): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        setMaxListeners(n: any): any;
        static EventEmitter: any;
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
    }
}
export namespace FSRepository {
    class EventEmitter {
        constructor();
        addListener(type: any, listener: any): any;
        emit(type: any, ...args: any[]): any;
        eventNames(): any;
        getMaxListeners(): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        setMaxListeners(n: any): any;
        static EventEmitter: any;
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
    }
}
export namespace MongoRepository {
    class EventEmitter {
        constructor();
        addListener(type: any, listener: any): any;
        emit(type: any, ...args: any[]): any;
        eventNames(): any;
        getMaxListeners(): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        setMaxListeners(n: any): any;
        static EventEmitter: any;
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
    }
}
export namespace MongooseRepository {
    class EventEmitter {
        constructor();
        addListener(type: any, listener: any): any;
        emit(type: any, ...args: any[]): any;
        eventNames(): any;
        getMaxListeners(): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        setMaxListeners(n: any): any;
        static EventEmitter: any;
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
    }
}
export namespace PostgreRepository {
    class EventEmitter {
        constructor();
        addListener(type: any, listener: any): any;
        emit(type: any, ...args: any[]): any;
        eventNames(): any;
        getMaxListeners(): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        setMaxListeners(n: any): any;
        static EventEmitter: any;
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
    }
}
export namespace RedisRepository {
    class EventEmitter {
        constructor();
        addListener(type: any, listener: any): any;
        emit(type: any, ...args: any[]): any;
        eventNames(): any;
        getMaxListeners(): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        setMaxListeners(n: any): any;
        static EventEmitter: any;
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
    }
}
